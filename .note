import React, { useState } from 'react';
import axios from 'axios';
import ReviewForm from './components/ReviewForm';
import GeneratedReview from './components/GeneratedReview';
import Header from './components/Header';
import Footer from './components/Footer';

interface ReviewFormData {
  therapistName: string;
  technique: number;
  pressure: number;
  communication: number;
  overall: number;
  specialNote: string;
}

function App() {
  const [review, setReview] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<ReviewFormData>({
    therapistName: '',
    technique: 1,
    pressure: 1,
    communication: 1,
    overall: 1,
    specialNote: '',
  });

  const generateReview = async () => {
    setIsLoading(true);
    try {
      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-4o',
          messages: [
          {
            role: 'system',
            content: 'あなたは、指定された評価とメモに基づいて、性風俗店の体験レビューを書くアシスタントです。',
          },
          {
            role: 'user',
            content: `
                  以下の評価、メモに基づいて性風俗店の体験レビューを書いてください。

                  #必須項目
                  -生成文のメインは「快感のピークに向かう生々しい描写、そして快感のピークに達した瞬間のリアルな描写」をとする。
                  -時系列のストーリー仕立てで臨場感たっぷりに描く
                  -体験を時系列で語る
                  -自然な口語表現で文章をつくる
                  -語り掛けるような口調
                  -ネガティブな内容であっても無理やり褒める

                  #文章のスタイル、トーン
                    -ポジティブなレビューとすること
                    -日常会話的な平易な単語をチョイスする
                    -敬語でありながらも難しい言い回しは使わず、フランクな口調
                    -鮮明に具体的に情景描写する
                    -感覚的な描写を巧みに取り入れて快感を表現
                    -官能的ながらもロマンチスト的な表現にならず具体的な描写
                    -比喩表現は用いない
                    -大げさすぎたり、誇張しすぎた表現は

                  ＃生成条件
                    -性風俗店の体験レビューとして読み応えのあるものとする
                    -想定読者は風俗店を利用することに楽しさを見出している人
                    -用いる用語は、性風俗業界で一般的に用いられているものとする
                    -16歳レベルの教養で理解できる表現
                    -1文は短め
                    -改行をやや多めに入れて、読みやすさにこだわる
                    -インプット内容を分析し、自然な流れの文章となるように「単語の再選定」と「文章構成の再構築」を御行う。その後、一貫性のある文章を生成する
                    -文字数は220文字以上250文字未満

                   #以下の採点結果をレビューに反映させてください。
                    （直接的な星の数への言及は避けてください）

                    嬢の名前は ${formData.therapistName} です。 
                    業態: ${formData.industryType}

                      評価（5つ星中）:
                      - ルックス・スタイル: ${formData.technique}
                      - サービス: ${formData.pressure}
                      - コミュニケーション: ${formData.communication}
                      - コスパ: ${formData.overall}
                      特別なメモ: ${formData.specialNote}

                      #評価項目の詳細
                      -星評価について
                      3以上で欠点とみなさない。
                      1=残念
                      2=いまいち
                      3=満足
                      4=大満足
                      5=超満足

                      -スタイル・ルックス
                      容姿やスタイルなど、見た目に関する評価

                      -サービス
                      提供される具体的なプレイやサービスの質について、どれほどの快感を届けてもらったか。

                      -コミュニケーション
                      風俗嬢の態度やコミュニケーションスキル、気配りなどについての評価

                      -コスパ
                      料金に対するサービスの満足度

                      #NGワード
                      魔法, 夢, 旧友と再会

                      #業態別使用用語注意
                      デリヘル, ソープ - 施術はプレイとする。


                    `
          }
          ],
        },
        {
          headers: {
            'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
        }
      );
      const generatedReview = response.data.choices[0].message.content;
      console.log('生成された口コミ:', generatedReview);  // ここを確認
      setReview(generatedReview);
    } catch (error) {
      console.error('Error generating review:', error);
      setReview('申し訳ありませんが、口コミを生成できませんでした。もう一度お試しください。');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await generateReview();
  };

  const handleRegenerate = async () => {
    await generateReview();
  };

  const handleCopy = () => {
    if (review) {
      navigator.clipboard.writeText(review).then(() => {
        alert('レビューをクリップボードにコピーしました。');
      });
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-100">
      <Header />
      <main className="flex-grow container mx-auto px-4 py-6">
        <div className="bg-white rounded-lg shadow-xl p-6 max-w-md mx-auto">
          <ReviewForm
            formData={formData}
            setFormData={setFormData}
            onSubmit={handleSubmit}
            isLoading={isLoading}
          />
          <GeneratedReview 
            review={review} 
            onRegenerate={handleRegenerate}
            onCopy={handleCopy}
            isLoading={isLoading}
          />
        </div>
      </main>
      <Footer />
    </div>
  );
}

export default App;


###


import React from 'react';

interface ReviewFormProps {
  formData: {
    therapistName: string;
    industryType: string;
    technique: number;
    pressure: number;
    communication: number;
    overall: number;
    specialNote: string;
  };
  setFormData: React.Dispatch<React.SetStateAction<{
    therapistName: string;
    industryType: string;
    technique: number;
    pressure: number;
    communication: number;
    overall: number;
    specialNote: string;
  }>>;
  onSubmit: (e: React.FormEvent) => void;
  isLoading: boolean;
}

const ReviewForm: React.FC<ReviewFormProps> = ({ formData, setFormData, onSubmit, isLoading }) => {
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleRatingChange = (name: string, value: number) => {
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const StarRating = ({ name, value }: { name: string, value: number }) => (
    <div className="flex space-x-1">
      {[1, 2, 3, 4, 5].map((star) => (
        <svg
          key={star}
          className={`w-8 h-8 cursor-pointer ${star <= value ? 'text-yellow-400' : 'text-gray-300'}`}
          fill="currentColor"
          viewBox="0 0 20 20"
          onClick={() => handleRatingChange(name, star)}
        >
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </svg>
      ))}
    </div>
  );

  const labelClass = "block text-sm font-medium text-gray-700 mb-1";
  const inputClass = "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-black focus:border-black text-base";

  return (
    <form onSubmit={onSubmit} className="space-y-6">
      <div className="space-y-1">
        <label htmlFor="therapistName" className={labelClass}>嬢のなまえ</label>
        <input
          type="text"
          id="therapistName"
          name="therapistName"
          value={formData.therapistName}
          onChange={handleInputChange}
          className={inputClass}
          required
        />
      </div>
      <div className="space-y-1">
        <label htmlFor="industryType" className={labelClass}>業態</label>
        <div className="relative">
          <select
            id="industryType"
            name="industryType"
            value={formData.industryType}
            onChange={handleInputChange}
            className={`${inputClass} appearance-none pr-8`}
            required
          >
            <option value="">業態を選択してください</option>
            <option value="デリヘル">デリヘル</option>
            <option value="ソープ">ソープ</option>
            <option value="抜きありのエステ">風エス</option>
          </select>
          <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
            <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
              <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
            </svg>
          </div>
        </div>
      </div>
      <div className="space-y-4">
      <label htmlFor="StarRate" className={labelClass}>評価</label>
        <div className="grid grid-cols-2 gap-6">
          <div>
            <label className={labelClass}>ルックス・スタイル</label>
            <StarRating name="technique" value={formData.technique} />
          </div>
          <div>
            <label className={labelClass}>サービス</label>
            <StarRating name="pressure" value={formData.pressure} />
          </div>
          <div>
            <label className={labelClass}>コミュニケーション</label>
            <StarRating name="communication" value={formData.communication} />
          </div>
          <div>
            <label className={labelClass}>コスパ</label>
            <StarRating name="overall" value={formData.overall} />
          </div>
        </div>
      </div>
      <div className="space-y-1">
        <label htmlFor="specialNote" className={labelClass}>特筆すべき点</label>
        <textarea
          id="specialNote"
          name="specialNote"
          value={formData.specialNote}
          onChange={handleInputChange}
          className={inputClass}
          rows={2}
        />
      </div>
      <button
        type="submit"
        className="w-full bg-gray-600 text-white py-3 px-4 rounded-md text-lg font-semibold hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-black focus:ring-opacity-50 transition duration-150 ease-in-out"
        disabled={isLoading}
      >
        {isLoading ? '口コミ生成中...' : '口コミを生成'}
      </button>
    </form>
  );
};

export default ReviewForm;


###



import React from 'react';
import LoadingAnimation from './LoadingAnimation';

const GeneratedReview = ({ review, onRegenerate, onCopy, isLoading }) => {
  const buttonBaseClass = "flex-1 px-4 py-3 rounded-md text-lg font-semibold transition duration-300";
  const buttonActiveClass = "bg-gray-600 text-white hover:bg-gray-700";
  const buttonDisabledClass = "bg-gray-400 text-gray-200 cursor-not-allowed";
  const reviewContent = review || '口コミはまだ生成されていません。';
  const isPlaceholder = !review;

  return (
    <div className="mt-8">
      <div className="p-4 bg-gray-100 rounded-md mb-6 min-h-[150px]">
        <h3 className="text-lg font-semibold text-gray-800 mb-2 text-center">生成された口コミ</h3>
        {isLoading ? (
          <div className="flex justify-center items-center h-24">
            <LoadingAnimation />
          </div>
        ) : (
          <p className={`whitespace-pre-wrap text-gray-700 font-sans text-base ${isPlaceholder ? 'text-center' : 'text-left'}`}>
            {reviewContent}
          </p>
        )}
      </div>
      <div className="flex space-x-4">
        <button
          onClick={onRegenerate}
          className={`${buttonBaseClass} ${review && !isLoading ? buttonActiveClass : buttonDisabledClass}`}
          disabled={!review || isLoading}
        >
          {isLoading ? '生成中...' : '再生成'}
        </button>
        <button
          onClick={onCopy}
          className={`${buttonBaseClass} ${review && !isLoading ? buttonActiveClass : buttonDisabledClass}`}
          disabled={!review || isLoading}
        >
          コピー
        </button>
      </div>
    </div>
  );
};

export default GeneratedReview;